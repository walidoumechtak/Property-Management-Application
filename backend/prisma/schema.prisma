// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  image        String?
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  properties   Property[] // Relationship to Property
}

model Property {
  id           Int      @id @default(autoincrement())
  name         String
  address      String
  type         String   // e.g., apartment, house
  numberOfUnits Int     // Number of units in the property
  rentalCost   Float    // Rental cost for the property
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenants      Tenant[] // Relationship to Tenant
  userId       Int
  user         User    @relation(fields: [userId], references: [id])
}

model Tenant {
  id           Int      @id @default(autoincrement())
  name         String
  contact      String
  section      String   // Section or unit the tenant occupies
  propertyId   Int
  property     Property @relation(fields: [propertyId], references: [id])
  payments     Payment[] // Relationship to Payment
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payment {
  id           Int      @id @default(autoincrement())
  amount       Float    // Payment amount
  datePaid     DateTime
  isSettled    Boolean  // Indicates whether the payment has been settled
  tenantId     Int
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


